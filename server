
#!/bin/bash

if [ $1 = 'help' ]; then

		echo "
		*******
		Obzidi4n's Nifty Server Scripts

		SERVER CONTROL
		./server help - this menu
		./server start <servername> - start a server
		./server stop <servername> - graceful shutdown
		./server shutdown - kill all servers now (emergency only)
		./server console - quick connect to tmux session
		./server dumplogs - cause that's a lot of space :)
		./server list - list servers and configurations
		./server pluginlist - list plugins
		./server backup - backup configs and world files

		UPDATES
		./server update bungee - get the latest bungee build
        ./server update spigot - download latest buildtools, run git and write to servers
        ./server update spigotjars - copy updated spigot.jar to server folders
		./server update plugins - get latest plugin builds & write to servers
		./server update pluginlist - get a fresh list of plugins

		*******
		"
fi


if [ $1 = 'backup' ]; then


	# set backup and cloud locations
	backup_loc='backups/servers'
	cloud_loc='delphi:delphicraft/backups/'

	# backup bungee
	echo 'Backing up: bungee'
	rsync -arzu --delete servers/bungee "$backup_loc"

	# backup servers, incporating exclude list
	while read server megs; do

			echo 'Backing up: '$server
			rsync -arzu --delete --exclude-from "config/backup-excludes" "servers/$server" "$backup_loc" 

	done < config/serverlist

	# create zip file
	echo "Zipping.."

	if [ -e "$backup_loc"-*.zip ]
		then
			rm "$backup_loc"-*.zip
	fi

	zip -rq "$backup_loc"-$(date +%m%d%y).zip "$backup_loc"

	echo "Created $backup_loc"-"$(date +%m%d%y)".zip 
	echo "Send to Cloud? (y/n)"

	read sendCloud

        if [ $sendCloud == "y" ] 
            then

			# send to cloud
			echo 'Sending to Cloud..'
			rclone sync "$backup_loc"-"$(date +%m%d%y)".zip "$cloud_loc"

			# report
			echo "Done! Backed up $backup_loc"-"$(date +%m%d%y)".zip to "$cloud_loc"

		fi

	echo "All done!"

fi

if [ $1 = 'list' ]; then

	echo ''

	while read server megs; do

		echo $server '('$megs' MB)'

	done < config/serverlist

	echo ''

fi

if [ $1 = 'pluginlist' ]; then

	while read plugin url; do

		echo $plugin

	done < config/pluginlist

fi


if [ $1 = 'dumplogs' ]; then

	while read server megs; do

		rm servers/$server/logs/*
		echo 'Dumped logs: ' $server

	done < config/serverlist

fi

if [ $1 = 'console' ]; then

	if (tmux has-session -t 'delphicraft' 2> /dev/null); then

		tmux attach -t delphicraft
		exit

	else
                tmux new-session -d -s delphicraft
                tmux attach -t delphicraft
		exit
	fi
fi


if [ $1 = 'shutdown' ]; then

	if (tmux has-session -t 'delphicraft' 2> /dev/null); then

		echo "A sudden stop might cause data loss! Try ./server stop all instead for a graceful shutdown."

		read -r -p "Are you sure? [y/N] " response

			response=${response,,}    # tolower

			if [[ $response =~ ^(yes|y)$ ]]; then

				tmux kill-session -t delphicraft
				echo 'Shutting down session.'
			else
				echo 'Shutdown aborted.'
				exit
			fi

		else

			echo "No session found."
			exit
	fi
fi

if [ $1 = 'stop' ]; then

	if [ $2 = 'all' ]; then

		if (tmux has-session -t 'delphicraft' 2> /dev/null); then

			tmux list-windows -t delphicraft|cut -d: -f1|xargs -I{} tmux send-keys -t delphicraft:{} '/stop' ENTER
			echo 'All servers stopped.'
		else
			echo 'No servers found.'
			exit
		fi
		exit

	fi

	if [ $2 = 'bungee' ]; then

		tmux send -t delphicraft:bungee 'e'
		tmux send -t delphicraft:bungee 'nd' ENTER
		echo 'Bungee stopped.'

	fi

	if [ $2 != 'bungee' ]; then

		tmux send -t delphicraft:$2 'stop' ENTER
		echo $2' stopped.'
	fi
fi

if [ $1 = 'start' ]; then

	if [ $2 = 'all' ]; then

		# check if session exists

        if (tmux has-session -t 'delphicraft' 2> /dev/null); then

			echo 'Sorry, already running.'
			exit

		else

			# ok start new session
			tmux new-session -d -s delphicraft

			# start windows

			i=1
			tmux new-window -t delphicraft:$i -n 'bungee' -c 'servers/bungee' 'java -Xms512M -Xmx512M -jar BungeeCord.jar'

			while read server megs; do

				(( i++ ))
	        	tmux new-window -t delphicraft:$i -n "$server" -c "servers/$server" 'java -Xmx'$megs'M -Xms'$megs'M -XX:+AlwaysPreTouch -XX:+DisableExplicitGC -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:MaxGCPauseMillis=50 -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=50 -XX:G1MaxNewSizePercent=80 -XX:InitiatingHeapOccupancyPercent=10 -XX:G1MixedGCLiveThresholdPercent=50 -XX:+AggressiveOpts -jar spigot.jar'

			done < config/serverlist

			tmux select-window -t delphicraft:1
			echo 'All servers started.'
			exit
                fi
                exit
	fi

	if [ $2 = 'bungee' ]; then

		# check if session exists
        if ! (tmux has-session -t 'delphicraft' 2> /dev/null); then

			tmux new-session -d -s delphicraft

		fi

		# start window
		tmux new-window -t delphicraft -n 'bungee' -c 'servers/bungee' 'java -Xms512M -Xmx512M -jar BungeeCord.jar'
		echo 'bungee started.'
		exit
	fi

	if [ $2 != 'bungee' ]; then

            # check if session exists
            if ! (tmux has-session -t 'delphicraft' 2> /dev/null); then

                    tmux new-session -d -s delphicraft

            fi

			# ok sesson doesn't exist yet

			# match serverlist to grab memory settings
			megs=$(awk '/'$2'/ {print $2}' config/serverlist);

			# boot server in new tmux window
			tmux new-window -t delphicraft:$i -n $2 -c 'servers/'$2 'java -Xmx'$megs'M -Xms'$megs'M -XX:+AlwaysPreTouch -XX:+DisableExplicitGC -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:MaxGCPauseMillis=50 -XX:TargetSurvivorRatio=90 -XX:G1NewSizePercent=50 -XX:G1MaxNewSizePercent=80 -XX:InitiatingHeapOccupancyPercent=10 -XX:G1MixedGCLiveThresholdPercent=50 -XX:+AggressiveOpts -jar spigot.jar'
			echo $2' started'

			exit
		fi
fi

if [ $1 = 'update' ]; then

	if [ $2 = 'plugins' ]; then

		echo 'Cleaning up plugins directory'
		rm common-files/plugins/*

		## download latest plugin builds - call python script ##
		python scripts/plugins.py

			# find zips and unzip them
			for file in common-files/plugins/*.zip
				do

					echo 'Unzipping ' $file
					unzip -jo $file -d ${file%.*}

					# copy jars up from unzipped folders
					for jarfile in ${file%.*}/*.jar
						do

							jarfile_base=${jarfile##*/}
							echo 'Moving ' $jarfile_base
							cp $jarfile common-files/plugins/$jarfile_base

						done

				done

			# cleanup: remove sub-directories
			echo 'Removing subdirectories'
			rm -rf common-files/plugins/*/

			# cleanup: remove zips
			echo 'Removing zips'
			for file in common-files/plugins/*.zip
				do

						rm $file

				done

			echo 'Plugin jars downloaded'


		## remove version numbers, etc. ##

			# delete unwanted files
			rm common-files/plugins/*{javadoc,sources}*

			# remove 'SNAPSHOT'
			for plugin in common-files/plugins/*SNAPSHOT*
			do
				mv $plugin ${plugin/SNAPSHOT/}
			done

			# clean up version numbers
			for plugin in common-files/plugins/*.jar
			do

				plugin_path=${plugin%/*}'/'
				plugin_base=${plugin##*/}

				# strip version numbers
				new_plugin_base=${plugin_base%%[0-9]*}

			    # trim any non .jar endings
			    if ! [[ $new_plugin_base =~ (jar)$ ]]; then

			        new_plugin_base=${new_plugin_base%-*}
			        jar='.jar'
			        new_plugin_base=$new_plugin_base$jar

			    fi

			# rename files

			    if ! [[ $plugin == $plugin_path$new_plugin_base ]]; then

			        mv $plugin $plugin_path$new_plugin_base

			    fi

			done

			echo 'Filenames cleaned up'


		## check plugins against common-files directory, update if needed.
		while read server megs
		do

			for plugin in servers/$server/plugins/*.jar
				do

					plugin_base="${plugin##*/}"
					echo "server: "$server "plugin: "$plugin_base
					if diff common-files/plugins/$plugin_base servers/$server/plugins/$plugin_base > /dev/null; then
						echo "Up to Date"
						else
							cp -f common-files/plugins/$plugin_base servers/$server/plugins/$plugin_base
							echo "Updated"
						fi

				done

		done < config/serverlist

		echo 'Plugins copied to servers.'
		echo 'Done!'
	fi


	if [ $2 = 'bungee' ]; then

		# todo: check if directory exists, if not, create and then CD
		cd servers/bungee
		rm BungeeCord.jar
		wget http://ci.md-5.net/job/BungeeCord/lastSuccessfulBuild/artifact/bootstrap/target/BungeeCord.jar
		echo "Done!"
	fi

	if [ $2 = 'spigot' ]; then

		# todo: check if directory exists, if not, create and then CD
		# empty old builds
        chmod -R 777 common-files/buildtools/*
        rm -rf common-files/buildtools/*
		cd common-files/buildtools
		wget "https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar" -O BuildTools.jar
		git config --global --unset core.autocrlf

		# run git .. this takes awhile, run inside tmux
		tmux new -d -s spigot 'java -jar -Xmx2G -Xms2G BuildTools.jar'

		echo  "Running buildtools in a tmux session called 'spigot'. Join session? (y/n)"
        read joinsession

                if [ $joinsession = "y" ]; then
                    tmux attach -t spigot
                else
                     exit
                fi

	fi

	if [ $2 = 'spigotjars' ]; then

		# strip version numbers from spigot.jar

		cd common-files/buildtools

		if  [ ! -f spigot.jar ]; then

			mv spigot*.jar spigot.jar
		fi

		cd ../..

		# copy to servers
		while read server megs; do

			cp -f common-files/buildtools/spigot.jar servers/$server/spigot.jar

		done < config/serverlist

		echo 'Done!'
		exit
	fi

	if [ $2 = 'pluginlist' ]; then

		# retrieve filenames from servers
		i=0
		for file in servers/*/plugins/*.jar
		do
			plugins[$i]=$(basename "$file");
			((i++));
		done

		# dedupe array
		readarray -t allPlugins < <(printf '%s\n' "${plugins[@]}" | sort -u);

		# update file
		rm config/pluginlist
		for each in "${allPlugins[@]}"
		do
			echo $each >> config/pluginlist
		done

	fi
fi
